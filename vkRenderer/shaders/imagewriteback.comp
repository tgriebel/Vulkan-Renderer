/*
* MIT License
*
* Copyright( c ) 2023 Thomas Griebel
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this softwareand associated documentation files( the "Software" ), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and /or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions :
*
* The above copyright noticeand this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_GOOGLE_include_directive : require

#include "globals.h"
#include "color.h"

struct WriteBackParms
{
    vec4	dimensions;
	uint	imageId;
};

GLOBALS_LAYOUT( 0, 0 )
SAMPLER_2D_LAYOUT( 0, 1 )
CONSTANT_LAYOUT( 0, 2, WriteBackParms, writebackParms)
WRITE_BUFFER_LAYOUT( 0, 3, vec4, imageWriteback)

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

void main()
{
    const uint x = gl_GlobalInvocationID.x;
    const uint y = gl_GlobalInvocationID.y;
	const uint z = gl_GlobalInvocationID.z;

	//const ivec2 dims = textureSize( texSampler[ writebackParms.imageId + z ], 0 );

	const uint width = uint( writebackParms.dimensions.x );
	const uint height = uint( writebackParms.dimensions.y );
	const uint layers = uint( writebackParms.dimensions.z );
	
	if( x >= width || y >= height || z >= layers ) {
		return;
	}

	// textureSize
	// textureQueryLevels

	const vec4 pixel = texelFetch( texSampler[ writebackParms.imageId + z ], ivec2( x, y ), 0 );
	
	const uint offset = x + ( y * width ) + z * ( width * height );

	const vec4 sRgb = LinearToSrgb( pixel.rgba );
	imageWriteback[ offset ].xyzw = sRgb.abgr;
}