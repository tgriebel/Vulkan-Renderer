/**
* Example Fragment Shader
* Sets the color and alpha of the pixel by setting gl_FragColor
*/

// Set the precision for data types used in this shader
precision highp float;
precision highp int;

// Default THREE.js uniforms available to both fragment and vertex shader
uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat3 normalMatrix;

// Default uniforms provided by ShaderFrog.
uniform vec3 cameraPosition;
uniform float time;
uniform float perceptualRoughness;
uniform vec3 kS;

// A uniform unique to this shader. You can modify it to the using the form
// below the shader preview. Any uniform you add is automatically given a form
uniform vec3 color;
uniform vec3 lightPosition;
uniform samplerCube envMap;

// Example varyings passed from the vertex shader
varying vec3 vPosition;
varying vec3 vNormal;
varying vec2 vUv;
varying vec2 vUv2;

#define PI 3.14159

float D_GGX( float NoH, float a )
{
    float a2     = a * a;
    float NoH2 = NoH * NoH;
	
    float nom    = a2;
    float denom  = ( NoH2 * ( a2 - 1.0 ) + 1.0 );
    denom        = PI * denom * denom;
	
    return nom / denom;
}

float G_SchlickGGX(float NdotV, float k)
{
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return nom / denom;
}
  
float G_Smith( vec3 N, vec3 V, vec3 L, float k )
{
    float NdotV = max( dot( N, V ), 0.0 );
    float NdotL = max( dot( N, L ), 0.0 );
    float ggx1 = G_SchlickGGX( NdotV, k );
    float ggx2 = G_SchlickGGX( NdotL, k );
	
    return ggx1 * ggx2;
}

float D_Blinn( float NoH, float a ) {
    float power = ( 2.0 / ( a * a ) - 2.0 );
    return ( 1.0 / ( PI * a * a ) ) * pow( NoH, 1.0 );
}

vec3 F_Schlick( float cosTheta, vec3 f0 ) {
    return f0 + ( 1.0 - f0 ) * pow( 1.0 - cosTheta, 5.0);
}

float Fd_Lambert() {
    return 1.0 / PI;
}

void main() {

    // Calculate the real position of this pixel in 3d space, taking into account
    // the rotation and scale of the model. It's a useful formula for some effects.
    // This could also be done in the vertex shader
    vec3 worldPosition = ( modelMatrix * vec4( vPosition, 1.0 )).xyz;

    // Calculate the normal including the model rotation and scale
    vec3 cameraOrigin = cameraPosition;
    vec3 v = normalize( cameraOrigin - vPosition.xyz );
    vec3 n = normalize( vec3( modelMatrix * vec4( vNormal, 0.0 ) ) );
    vec3 l = normalize( lightPosition - worldPosition );
    
    vec3 h = normalize( v + l );
    
    float NoV = abs( dot( n, v ) ) + 1e-5;
    float NoL = clamp( dot( n, l ), 0.0, 1.0);
    float NoH = clamp( dot( n, h ), 0.0, 1.0);
    float LoH = clamp( dot( l, h ), 0.0, 1.0);
    
    vec3 r = 2.0 * NoL * n - l;
    
    vec3 kD = vec3( 1.0 ) - kS;
    
    vec3 f0 = vec3( 1.0, 1.0, 1.0 );
    float a = perceptualRoughness * perceptualRoughness;
    float k = ( ( a + 1.0 ) * ( a + 1.0 ) ) / 8.0; // TODO: this is ( a*a / 2 ) for IBL sources

    vec4 s = textureCube( envMap, n );
    
    //( vec3 N, vec3 V, vec3 L, float k )
    
    float D = D_GGX( NoH, a );
    vec3  F = F_Schlick( NoH, f0 );
    float G = G_Smith( n, v, l, k );

    // specular BRDF
    vec3 Fr = vec3( D * G ) * F;
    Fr = Fr / ( 4.0 * NoL * NoV );
    
    vec3 texColor = vec3( 1.0, 0.0, 0.0 )

    // diffuse BRDF
    vec3 Fd = kD * texColor.rgb * Fd_Lambert();
    
    float phongSpec = pow( NoH, 5.0 );
    float fresnel = pow( 1.0 - NoV, 3.0 );

    vec4 c = vec4( 0.0, 0.0, 0.0, 1.0 );
    
    c.xyz += ( Fd + Fr ) * NoL;

    gl_FragColor = c;

}